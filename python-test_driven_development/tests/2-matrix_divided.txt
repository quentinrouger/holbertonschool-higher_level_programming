>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> print([[1, 2, 3],[4, 5, 6]])
[[1, 2, 3], [4, 5, 6]]

>>> print(matrix_divided([[1, 2.1, 3],[4, 5, 6]], 3.1))
[[0.32, 0.68, 0.97], [1.29, 1.61, 1.94]]

>>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], 'a'))
Traceback (most recent call last):
TypeError: div must be a number

>>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> print(matrix_divided([['a', 2, 3],[4, 5, 6]], 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided([[1, 2, 3, 4],[4, 5, 6]], 3))
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

>>> print(matrix_divided(((1, 2, 3, 4),(4, 5, 6)), 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided(None, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided([[1, 2, 3],[4, 5, 6]], float('nan')))
[[nan, nan, nan], [nan, nan, nan]]
